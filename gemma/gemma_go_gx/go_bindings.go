// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package gemma_go_gx are Go bindings to the GX package:
// github.com/gx-org/gemma/gemma.
//
// Automatically generated by
// gx/golang/binder/gobindings/bindings.go.tmpl.
package gemma_go_gx

import (
	"fmt"
	"reflect"
	"strings"

	"github.com/gx-org/backend/platform"
	_ "github.com/gx-org/gemma/gemma"
	"github.com/gx-org/gx/api"
	"github.com/gx-org/gx/api/values"
	"github.com/gx-org/gx/build/ir"
	"github.com/gx-org/gx/golang/binder/gobindings/types"
	"github.com/gx-org/gx/interp"
	"github.com/gx-org/gx/interp/state"
	"github.com/pkg/errors"
)

// Force some package dependencies.
var (
	_ = fmt.Println
	_ = strings.Compare
	_ = reflect.TypeFor[int]
	_ = values.Struct{}
	_ = errors.Errorf
	_ = types.NewSlice[types.Bridger]
)

// Package is the GX package built for a given backend.
type Package struct {
	Runtime *api.Runtime
	IR      *ir.Package
	Tracer  state.Tracer
}

// Load the GX package for a given backend.
func Load(rtm *api.Runtime) (*Package, error) {
	irPackage, err := rtm.Builder().Build("github.com/gx-org/gemma/gemma")
	if err != nil {
		return nil, err
	}
	pkg := &Package{
		Runtime: rtm,
		IR:      irPackage,
	}

	return pkg, nil
}

// CompilerFor loads the GX package github.com/gx-org/gemma/gemma
// then returns the compiler for a given device and options.
func CompilerFor(rtm *api.Runtime, dev platform.Device, options ...interp.PackageOptionFactory) (*Compiler, error) {
	pkg, err := Load(rtm)
	if err != nil {
		return nil, err
	}
	return pkg.CompilerFor(dev, options...), nil
}

// Factory create new instance of types used in the package.
// The compiler associated with the factory defines on what
// device and with which options methods of the instances
// created by the factory are compiled for.
type Factory struct {
	Compiler *Compiler
}

// Compiler compiles GX functions for a given device.
type Compiler struct {
	Package *Package
	Device  platform.Device
	Factory *Factory

	options []interp.PackageOption

	methodGemmaNewSamplingState methodBase
	methodGemmaSampleStep       methodBase
}

// AppendOptions appends options to the compiler.
func (cmpl *Compiler) AppendOptions(options ...interp.PackageOptionFactory) {
	plat := cmpl.Package.Runtime.Platform()
	for _, opt := range options {
		cmpl.options = append(cmpl.options, opt(plat))
	}
}

// CompilerFor returns a compiler for a device and options.
func (pkg *Package) CompilerFor(dev platform.Device, options ...interp.PackageOptionFactory) *Compiler {
	c := &Compiler{
		Package: pkg,
		Device:  dev,
	}
	c.Factory = &Factory{Compiler: c}
	c.AppendOptions(options...)

	c.methodGemmaNewSamplingState = methodBase{
		compiler: c,
		function: c.Package.IR.Types[1].Methods[0].(*ir.FuncDecl),
	}
	c.methodGemmaSampleStep = methodBase{
		compiler: c,
		function: c.Package.IR.Types[1].Methods[1].(*ir.FuncDecl),
	}

	return c
}

var VocabSize VocabSizeStatic

type VocabSizeStatic struct {
	value ir.Int
}

func (VocabSizeStatic) Set(value ir.Int) interp.PackageOptionFactory {
	return func(plat platform.Platform) interp.PackageOption {
		hostValue := types.DefaultInt(value)
		return interp.PackageVarSetValue{
			Pkg:   "github.com/gx-org/gemma/gemma",
			Var:   "VocabSize",
			Value: hostValue.GXValue(),
		}
	}
}

var ModelDim ModelDimStatic

type ModelDimStatic struct {
	value ir.Int
}

func (ModelDimStatic) Set(value ir.Int) interp.PackageOptionFactory {
	return func(plat platform.Platform) interp.PackageOption {
		hostValue := types.DefaultInt(value)
		return interp.PackageVarSetValue{
			Pkg:   "github.com/gx-org/gemma/gemma",
			Var:   "ModelDim",
			Value: hostValue.GXValue(),
		}
	}
}

var FFHiddenDim FFHiddenDimStatic

type FFHiddenDimStatic struct {
	value ir.Int
}

func (FFHiddenDimStatic) Set(value ir.Int) interp.PackageOptionFactory {
	return func(plat platform.Platform) interp.PackageOption {
		hostValue := types.DefaultInt(value)
		return interp.PackageVarSetValue{
			Pkg:   "github.com/gx-org/gemma/gemma",
			Var:   "FFHiddenDim",
			Value: hostValue.GXValue(),
		}
	}
}

var QKVDim QKVDimStatic

type QKVDimStatic struct {
	value ir.Int
}

func (QKVDimStatic) Set(value ir.Int) interp.PackageOptionFactory {
	return func(plat platform.Platform) interp.PackageOption {
		hostValue := types.DefaultInt(value)
		return interp.PackageVarSetValue{
			Pkg:   "github.com/gx-org/gemma/gemma",
			Var:   "QKVDim",
			Value: hostValue.GXValue(),
		}
	}
}

var NumHeads NumHeadsStatic

type NumHeadsStatic struct {
	value ir.Int
}

func (NumHeadsStatic) Set(value ir.Int) interp.PackageOptionFactory {
	return func(plat platform.Platform) interp.PackageOption {
		hostValue := types.DefaultInt(value)
		return interp.PackageVarSetValue{
			Pkg:   "github.com/gx-org/gemma/gemma",
			Var:   "NumHeads",
			Value: hostValue.GXValue(),
		}
	}
}

var NumGemmaLayers NumGemmaLayersStatic

type NumGemmaLayersStatic struct {
	value ir.Int
}

func (NumGemmaLayersStatic) Set(value ir.Int) interp.PackageOptionFactory {
	return func(plat platform.Platform) interp.PackageOption {
		hostValue := types.DefaultInt(value)
		return interp.PackageVarSetValue{
			Pkg:   "github.com/gx-org/gemma/gemma",
			Var:   "NumGemmaLayers",
			Value: hostValue.GXValue(),
		}
	}
}

var NumSamplingSteps NumSamplingStepsStatic

type NumSamplingStepsStatic struct {
	value ir.Int
}

func (NumSamplingStepsStatic) Set(value ir.Int) interp.PackageOptionFactory {
	return func(plat platform.Platform) interp.PackageOption {
		hostValue := types.DefaultInt(value)
		return interp.PackageVarSetValue{
			Pkg:   "github.com/gx-org/gemma/gemma",
			Var:   "NumSamplingSteps",
			Value: hostValue.GXValue(),
		}
	}
}

var PromptLength PromptLengthStatic

type PromptLengthStatic struct {
	value ir.Int
}

func (PromptLengthStatic) Set(value ir.Int) interp.PackageOptionFactory {
	return func(plat platform.Platform) interp.PackageOption {
		hostValue := types.DefaultInt(value)
		return interp.PackageVarSetValue{
			Pkg:   "github.com/gx-org/gemma/gemma",
			Var:   "PromptLength",
			Value: hostValue.GXValue(),
		}
	}
}

// handleLayer stores the backend handles of Layer.
type handleLayer struct {
	compiler *Compiler
	struc    *ir.NamedType
	owner    *Layer
}

// Type of the value.
func (h *handleLayer) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleLayer) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleLayer) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleLayer) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleLayer) String() string {
	bld := strings.Builder{}
	bld.WriteString("Layer{\n")

	bld.WriteString(fmt.Sprintf("%s:%s\n", "PreAttNorm", any(h.owner.PreAttNorm).(fmt.Stringer).String()))

	bld.WriteString(fmt.Sprintf("%s:%s\n", "Attention", any(h.owner.Attention).(fmt.Stringer).String()))

	bld.WriteString(fmt.Sprintf("%s:%s\n", "Queries", any(h.owner.Queries).(fmt.Stringer).String()))

	bld.WriteString(fmt.Sprintf("%s:%s\n", "Keys", any(h.owner.Keys).(fmt.Stringer).String()))

	bld.WriteString(fmt.Sprintf("%s:%s\n", "Values", any(h.owner.Values).(fmt.Stringer).String()))

	bld.WriteString(fmt.Sprintf("%s:%s\n", "PreNorm", any(h.owner.PreNorm).(fmt.Stringer).String()))

	bld.WriteString(fmt.Sprintf("%s:%s\n", "UpGate", any(h.owner.UpGate).(fmt.Stringer).String()))

	bld.WriteString(fmt.Sprintf("%s:%s\n", "UpLinear", any(h.owner.UpLinear).(fmt.Stringer).String()))

	bld.WriteString(fmt.Sprintf("%s:%s\n", "DownLinear", any(h.owner.DownLinear).(fmt.Stringer).String()))

	bld.WriteString("}")
	return bld.String()
}

// Layer stores the handle of Layer on a device.
type Layer struct {
	handle handleLayer
	value  *values.Struct

	PreAttNorm types.Array[float32]

	Attention types.Array[float32]

	Queries types.Array[float32]

	Keys types.Array[float32]

	Values types.Array[float32]

	PreNorm types.Array[float32]

	UpGate types.Array[float32]

	UpLinear types.Array[float32]

	DownLinear types.Array[float32]
}

var (
	_ types.Bridger      = (*Layer)(nil)
	_ types.StructBridge = (*handleLayer)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handleLayer) StructValue() *values.Struct {
	return h.owner.value
}

// MarshalLayer populates the receiver fields with device handles.
func (cmpl *Compiler) MarshalLayer(val values.Value) (s *Layer, err error) {
	s = cmpl.Factory.NewLayer()
	var ok bool
	s.value, ok = val.(*values.Struct)
	if !ok {
		err = fmt.Errorf("cannot use handle to set Layer: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, s.value.StructType().NumFields())
	for i := range fields {
		fields[i] = s.value.FieldValue(i)
	}

	field0Value, ok := fields[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field0 := types.NewArray[float32](field0Value)

	field1Value, ok := fields[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field1 := types.NewArray[float32](field1Value)

	field2Value, ok := fields[2].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[2], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field2 := types.NewArray[float32](field2Value)

	field3Value, ok := fields[3].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[3], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field3 := types.NewArray[float32](field3Value)

	field4Value, ok := fields[4].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[4], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field4 := types.NewArray[float32](field4Value)

	field5Value, ok := fields[5].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[5], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field5 := types.NewArray[float32](field5Value)

	field6Value, ok := fields[6].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[6], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field6 := types.NewArray[float32](field6Value)

	field7Value, ok := fields[7].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[7], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field7 := types.NewArray[float32](field7Value)

	field8Value, ok := fields[8].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[8], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field8 := types.NewArray[float32](field8Value)

	s.PreAttNorm = field0
	s.Attention = field1
	s.Queries = field2
	s.Keys = field3
	s.Values = field4
	s.PreNorm = field5
	s.UpGate = field6
	s.UpLinear = field7
	s.DownLinear = field8
	return
}

func (s Layer) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *Layer) Bridge() types.Bridge { return &s.handle }

// handleGemma stores the backend handles of Gemma.
type handleGemma struct {
	compiler *Compiler
	struc    *ir.NamedType
	owner    *Gemma

	runnerNewSamplingState *MethodGemmaNewSamplingState

	runnerSampleStep *MethodGemmaSampleStep
}

// MethodGemmaNewSamplingState compiles and runs the GX function NewSamplingState for a device.
// NewSamplingState returns a new sampling state from the initial prompt.
type MethodGemmaNewSamplingState struct {
	methodBase
	receiver handleGemma
}

// MethodGemmaSampleStep compiles and runs the GX function SampleStep for a device.
// SampleStep runs a sample step and returns the new state.
type MethodGemmaSampleStep struct {
	methodBase
	receiver handleGemma
}

// Run first compiles NewSamplingState for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *MethodGemmaNewSamplingState) Run(arg0 types.Array[int32]) (_ *SamplingState, _ types.Array[float32], _ types.Atom[int64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // prompt [NumSamplingSteps+1]int32
	}
	if f.runner == nil {
		f.runner, err = f.compiler.Package.Runtime.Compile(f.compiler.Device, f.function, f.receiver.GXValue(), args, f.compiler.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(f.receiver.GXValue(), args, f.compiler.Package.Tracer)
	if err != nil {
		return
	}

	cmpl := f.compiler
	var out0 *SamplingState
	out0, err = cmpl.MarshalSamplingState(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[float32](out1Value)

	out2Value, ok := outputs[2].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[2], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out2 := types.NewAtom[int64](out2Value)

	return out0, out1, out2, nil
}

// Run first compiles SampleStep for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *MethodGemmaSampleStep) Run(arg0 *SamplingState) (_ *SamplingState, _ types.Array[float32], _ types.Atom[int64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // state gemma.SamplingState
	}
	if f.runner == nil {
		f.runner, err = f.compiler.Package.Runtime.Compile(f.compiler.Device, f.function, f.receiver.GXValue(), args, f.compiler.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(f.receiver.GXValue(), args, f.compiler.Package.Tracer)
	if err != nil {
		return
	}

	cmpl := f.compiler
	var out0 *SamplingState
	out0, err = cmpl.MarshalSamplingState(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[float32](out1Value)

	out2Value, ok := outputs[2].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[2], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out2 := types.NewAtom[int64](out2Value)

	return out0, out1, out2, nil
}

// Type of the value.
func (h *handleGemma) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleGemma) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleGemma) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleGemma) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleGemma) String() string {
	bld := strings.Builder{}
	bld.WriteString("Gemma{\n")

	bld.WriteString(fmt.Sprintf("%s:%s\n", "TokenEmbedding", any(h.owner.TokenEmbedding).(fmt.Stringer).String()))

	bld.WriteString(fmt.Sprintf("%s:%s\n", "Layers", any(h.owner.Layers).(fmt.Stringer).String()))

	bld.WriteString(fmt.Sprintf("%s:%s\n", "FinalNormScale", any(h.owner.FinalNormScale).(fmt.Stringer).String()))

	bld.WriteString("}")
	return bld.String()
}

// Gemma stores the handle of Gemma on a device.
type Gemma struct {
	handle handleGemma
	value  *values.Struct

	TokenEmbedding types.Array[float32]

	Layers *types.Slice[*Layer]

	FinalNormScale types.Array[float32]
}

var (
	_ types.Bridger      = (*Gemma)(nil)
	_ types.StructBridge = (*handleGemma)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handleGemma) StructValue() *values.Struct {
	return h.owner.value
}

// MarshalGemma populates the receiver fields with device handles.
func (cmpl *Compiler) MarshalGemma(val values.Value) (s *Gemma, err error) {
	s = cmpl.Factory.NewGemma()
	var ok bool
	s.value, ok = val.(*values.Struct)
	if !ok {
		err = fmt.Errorf("cannot use handle to set Gemma: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, s.value.StructType().NumFields())
	for i := range fields {
		fields[i] = s.value.FieldValue(i)
	}

	field0Value, ok := fields[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field0 := types.NewArray[float32](field0Value)

	field1Slice, ok := fields[1].(*values.Slice)
	if !ok {
		err = fmt.Errorf("cannot use value %T to set []<no value>: not a slice", fields[1])
		return
	}
	field1Elements := make([]*Layer, field1Slice.Size())
	for i := 0; i < field1Slice.Size(); i++ {
		field1HandleI := field1Slice.Element(i)
		var field1ElmtI *Layer
		field1ElmtI, err = cmpl.MarshalLayer(field1HandleI)
		if err != nil {
			return
		}
		field1Elements[i] = field1ElmtI
	}
	field1, err := types.NewSlice[*Layer](
		field1Slice.SliceType(),
		field1Elements,
	)
	if err != nil {
		return nil, err
	}

	field2Value, ok := fields[2].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[2], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field2 := types.NewArray[float32](field2Value)

	s.TokenEmbedding = field0
	s.Layers = field1
	s.FinalNormScale = field2
	return
}

func (s Gemma) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *Gemma) Bridge() types.Bridge { return &s.handle }

// NewSamplingState returns a handle to compile method NewSamplingState for a device.
func (s Gemma) NewSamplingState() *MethodGemmaNewSamplingState {
	return s.handle.runnerNewSamplingState
}

// SampleStep returns a handle to compile method SampleStep for a device.
func (s Gemma) SampleStep() *MethodGemmaSampleStep {
	return s.handle.runnerSampleStep
}

// handleKVCache stores the backend handles of KVCache.
type handleKVCache struct {
	compiler *Compiler
	struc    *ir.NamedType
	owner    *KVCache
}

// Type of the value.
func (h *handleKVCache) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleKVCache) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleKVCache) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleKVCache) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleKVCache) String() string {
	bld := strings.Builder{}
	bld.WriteString("KVCache{\n")

	bld.WriteString(fmt.Sprintf("%s:%s\n", "ks", any(h.owner.ks).(fmt.Stringer).String()))

	bld.WriteString(fmt.Sprintf("%s:%s\n", "vs", any(h.owner.vs).(fmt.Stringer).String()))

	bld.WriteString("}")
	return bld.String()
}

// KVCache stores the handle of KVCache on a device.
type KVCache struct {
	handle handleKVCache
	value  *values.Struct

	ks types.Array[float32]

	vs types.Array[float32]
}

var (
	_ types.Bridger      = (*KVCache)(nil)
	_ types.StructBridge = (*handleKVCache)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handleKVCache) StructValue() *values.Struct {
	return h.owner.value
}

// MarshalKVCache populates the receiver fields with device handles.
func (cmpl *Compiler) MarshalKVCache(val values.Value) (s *KVCache, err error) {
	s = cmpl.Factory.NewKVCache()
	var ok bool
	s.value, ok = val.(*values.Struct)
	if !ok {
		err = fmt.Errorf("cannot use handle to set KVCache: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, s.value.StructType().NumFields())
	for i := range fields {
		fields[i] = s.value.FieldValue(i)
	}

	field0Value, ok := fields[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field0 := types.NewArray[float32](field0Value)

	field1Value, ok := fields[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field1 := types.NewArray[float32](field1Value)

	s.ks = field0
	s.vs = field1
	return
}

func (s KVCache) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *KVCache) Bridge() types.Bridge { return &s.handle }

// handleSamplingState stores the backend handles of SamplingState.
type handleSamplingState struct {
	compiler *Compiler
	struc    *ir.NamedType
	owner    *SamplingState
}

// Type of the value.
func (h *handleSamplingState) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleSamplingState) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleSamplingState) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleSamplingState) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleSamplingState) String() string {
	bld := strings.Builder{}
	bld.WriteString("SamplingState{\n")

	bld.WriteString(fmt.Sprintf("%s:%s\n", "step", any(h.owner.step).(fmt.Stringer).String()))

	bld.WriteString(fmt.Sprintf("%s:%s\n", "x", any(h.owner.x).(fmt.Stringer).String()))

	bld.WriteString(fmt.Sprintf("%s:%s\n", "token", any(h.owner.token).(fmt.Stringer).String()))

	bld.WriteString(fmt.Sprintf("%s:%s\n", "cache", any(h.owner.cache).(fmt.Stringer).String()))

	bld.WriteString("}")
	return bld.String()
}

// SamplingState stores the handle of SamplingState on a device.
type SamplingState struct {
	handle handleSamplingState
	value  *values.Struct

	step types.Atom[int64]

	x types.Array[float32]

	token types.Atom[int64]

	cache *KVCache
}

var (
	_ types.Bridger      = (*SamplingState)(nil)
	_ types.StructBridge = (*handleSamplingState)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handleSamplingState) StructValue() *values.Struct {
	return h.owner.value
}

// MarshalSamplingState populates the receiver fields with device handles.
func (cmpl *Compiler) MarshalSamplingState(val values.Value) (s *SamplingState, err error) {
	s = cmpl.Factory.NewSamplingState()
	var ok bool
	s.value, ok = val.(*values.Struct)
	if !ok {
		err = fmt.Errorf("cannot use handle to set SamplingState: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, s.value.StructType().NumFields())
	for i := range fields {
		fields[i] = s.value.FieldValue(i)
	}

	field0Value, ok := fields[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field0 := types.NewAtom[int64](field0Value)

	field1Value, ok := fields[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field1 := types.NewArray[float32](field1Value)

	field2Value, ok := fields[2].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[2], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field2 := types.NewAtom[int64](field2Value)

	var field3 *KVCache
	field3, err = cmpl.MarshalKVCache(fields[3])
	if err != nil {
		return
	}
	s.step = field0
	s.x = field1
	s.token = field2
	s.cache = field3
	return
}

func (s SamplingState) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *SamplingState) Bridge() types.Bridge { return &s.handle }

type methodBase struct {
	compiler *Compiler
	function *ir.FuncDecl
	runner   *state.CompiledGraph
}

// NewLayer returns a handle on named type Layer.
func (fac *Factory) NewLayer() *Layer {
	s := &Layer{}
	typ := fac.Compiler.Package.IR.Types[0]
	s.handle = handleLayer{
		compiler: fac.Compiler,
		struc:    typ,
		owner:    s,
	}

	var err error
	s.value, err = values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}

	return s
}

var _ types.Bridge = (*handleLayer)(nil)

func (h *handleLayer) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {

	case "PreAttNorm":
		return nil, errors.Errorf("cannot create a new instance for field PreAttNorm: type types.Array[float32] not supported")

	case "Attention":
		return nil, errors.Errorf("cannot create a new instance for field Attention: type types.Array[float32] not supported")

	case "Queries":
		return nil, errors.Errorf("cannot create a new instance for field Queries: type types.Array[float32] not supported")

	case "Keys":
		return nil, errors.Errorf("cannot create a new instance for field Keys: type types.Array[float32] not supported")

	case "Values":
		return nil, errors.Errorf("cannot create a new instance for field Values: type types.Array[float32] not supported")

	case "PreNorm":
		return nil, errors.Errorf("cannot create a new instance for field PreNorm: type types.Array[float32] not supported")

	case "UpGate":
		return nil, errors.Errorf("cannot create a new instance for field UpGate: type types.Array[float32] not supported")

	case "UpLinear":
		return nil, errors.Errorf("cannot create a new instance for field UpLinear: type types.Array[float32] not supported")

	case "DownLinear":
		return nil, errors.Errorf("cannot create a new instance for field DownLinear: type types.Array[float32] not supported")

	default:
		return nil, errors.Errorf("structure Layer has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleLayer) SetField(field *ir.Field, val types.Bridge) error {
	name := field.Name.Name
	switch name {

	case "PreAttNorm":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field PreAttNorm: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.PreAttNorm = fieldValue
		h.owner.value.SetField(field.ID, val.GXValue())
		return nil

	case "Attention":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field Attention: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.Attention = fieldValue
		h.owner.value.SetField(field.ID, val.GXValue())
		return nil

	case "Queries":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field Queries: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.Queries = fieldValue
		h.owner.value.SetField(field.ID, val.GXValue())
		return nil

	case "Keys":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field Keys: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.Keys = fieldValue
		h.owner.value.SetField(field.ID, val.GXValue())
		return nil

	case "Values":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field Values: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.Values = fieldValue
		h.owner.value.SetField(field.ID, val.GXValue())
		return nil

	case "PreNorm":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field PreNorm: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.PreNorm = fieldValue
		h.owner.value.SetField(field.ID, val.GXValue())
		return nil

	case "UpGate":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field UpGate: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.UpGate = fieldValue
		h.owner.value.SetField(field.ID, val.GXValue())
		return nil

	case "UpLinear":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field UpLinear: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.UpLinear = fieldValue
		h.owner.value.SetField(field.ID, val.GXValue())
		return nil

	case "DownLinear":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field DownLinear: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.DownLinear = fieldValue
		h.owner.value.SetField(field.ID, val.GXValue())
		return nil

	default:
		return errors.Errorf("structure Layer has no field %q", name)
	}
}

// NewGemma returns a handle on named type Gemma.
func (fac *Factory) NewGemma() *Gemma {
	s := &Gemma{}
	typ := fac.Compiler.Package.IR.Types[1]
	s.handle = handleGemma{
		compiler: fac.Compiler,
		struc:    typ,
		owner:    s,
	}

	var err error
	s.value, err = values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}

	s.handle.runnerNewSamplingState = &MethodGemmaNewSamplingState{
		methodBase: s.handle.compiler.methodGemmaNewSamplingState,
		receiver:   s.handle,
	}

	s.handle.runnerSampleStep = &MethodGemmaSampleStep{
		methodBase: s.handle.compiler.methodGemmaSampleStep,
		receiver:   s.handle,
	}

	return s
}

var _ types.Bridge = (*handleGemma)(nil)

func (h *handleGemma) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {

	case "TokenEmbedding":
		return nil, errors.Errorf("cannot create a new instance for field TokenEmbedding: type types.Array[float32] not supported")

	case "Layers":
		slice, err := types.NewEmptySlice[*Layer](field.Type(), func() (types.Bridge, error) {
			return h.compiler.Factory.NewLayer().Bridge(), nil
		})
		if err != nil {
			return nil, err
		}
		return slice.Bridge(), nil

	case "FinalNormScale":
		return nil, errors.Errorf("cannot create a new instance for field FinalNormScale: type types.Array[float32] not supported")

	default:
		return nil, errors.Errorf("structure Gemma has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleGemma) SetField(field *ir.Field, val types.Bridge) error {
	name := field.Name.Name
	switch name {

	case "TokenEmbedding":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field TokenEmbedding: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.TokenEmbedding = fieldValue
		h.owner.value.SetField(field.ID, val.GXValue())
		return nil

	case "Layers":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(*types.Slice[*Layer])
		if !ok {
			return errors.Errorf("cannot set field Layers: cannot cast %T to *types.Slice[*Layer]", bridger)
		}
		h.owner.Layers = fieldValue
		h.owner.value.SetField(field.ID, val.GXValue())
		return nil

	case "FinalNormScale":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field FinalNormScale: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.FinalNormScale = fieldValue
		h.owner.value.SetField(field.ID, val.GXValue())
		return nil

	default:
		return errors.Errorf("structure Gemma has no field %q", name)
	}
}

// NewKVCache returns a handle on named type KVCache.
func (fac *Factory) NewKVCache() *KVCache {
	s := &KVCache{}
	typ := fac.Compiler.Package.IR.Types[2]
	s.handle = handleKVCache{
		compiler: fac.Compiler,
		struc:    typ,
		owner:    s,
	}

	var err error
	s.value, err = values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}

	return s
}

var _ types.Bridge = (*handleKVCache)(nil)

func (h *handleKVCache) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {

	case "ks":
		return nil, errors.Errorf("cannot create a new instance for field ks: type types.Array[float32] not supported")

	case "vs":
		return nil, errors.Errorf("cannot create a new instance for field vs: type types.Array[float32] not supported")

	default:
		return nil, errors.Errorf("structure KVCache has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleKVCache) SetField(field *ir.Field, val types.Bridge) error {
	name := field.Name.Name
	switch name {

	case "ks":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field ks: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.ks = fieldValue
		h.owner.value.SetField(field.ID, val.GXValue())
		return nil

	case "vs":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field vs: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.vs = fieldValue
		h.owner.value.SetField(field.ID, val.GXValue())
		return nil

	default:
		return errors.Errorf("structure KVCache has no field %q", name)
	}
}

// NewSamplingState returns a handle on named type SamplingState.
func (fac *Factory) NewSamplingState() *SamplingState {
	s := &SamplingState{}
	typ := fac.Compiler.Package.IR.Types[3]
	s.handle = handleSamplingState{
		compiler: fac.Compiler,
		struc:    typ,
		owner:    s,
	}

	var err error
	s.value, err = values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}

	return s
}

var _ types.Bridge = (*handleSamplingState)(nil)

func (h *handleSamplingState) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {

	case "step":
		return nil, errors.Errorf("cannot create a new instance for field step: type types.Atom[int64] not supported")

	case "x":
		return nil, errors.Errorf("cannot create a new instance for field x: type types.Array[float32] not supported")

	case "token":
		return nil, errors.Errorf("cannot create a new instance for field token: type types.Atom[int64] not supported")

	case "cache":
		return h.compiler.Factory.NewKVCache().Bridge(), nil

	default:
		return nil, errors.Errorf("structure SamplingState has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleSamplingState) SetField(field *ir.Field, val types.Bridge) error {
	name := field.Name.Name
	switch name {

	case "step":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[int64])
		if !ok {
			return errors.Errorf("cannot set field step: cannot cast %T to types.Atom[int64]", bridger)
		}
		h.owner.step = fieldValue
		h.owner.value.SetField(field.ID, val.GXValue())
		return nil

	case "x":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field x: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.x = fieldValue
		h.owner.value.SetField(field.ID, val.GXValue())
		return nil

	case "token":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[int64])
		if !ok {
			return errors.Errorf("cannot set field token: cannot cast %T to types.Atom[int64]", bridger)
		}
		h.owner.token = fieldValue
		h.owner.value.SetField(field.ID, val.GXValue())
		return nil

	case "cache":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(*KVCache)
		if !ok {
			return errors.Errorf("cannot set field cache: cannot cast %T to *KVCache", bridger)
		}
		h.owner.cache = fieldValue
		h.owner.value.SetField(field.ID, val.GXValue())
		return nil

	default:
		return errors.Errorf("structure SamplingState has no field %q", name)
	}
}
