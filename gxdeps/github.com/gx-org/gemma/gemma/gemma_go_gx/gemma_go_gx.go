// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package gemma_go_gx are Go bindings to the GX package:
// github.com/gx-org/gemma/gemma.
//
// Automatically generated by
// gx/golang/binder/gobindings/bindings.go.tmpl.
package gemma_go_gx

import (
	"fmt"
	"reflect"
	"strings"

	"github.com/gx-org/backend/platform"
	"github.com/gx-org/gx/api"
	"github.com/gx-org/gx/api/options"
	"github.com/gx-org/gx/api/tracer"
	"github.com/gx-org/gx/api/values"
	"github.com/gx-org/gx/build/ir"
	"github.com/gx-org/gx/golang/binder/gobindings/core"
	"github.com/gx-org/gx/golang/binder/gobindings/types"
	"github.com/pkg/errors"

	_ "github.com/gx-org/gemma/gemma"

	gxdep0 "github.com/gx-org/gx/stdlib/bindings/go/math_go_gx"
	gxdep1 "github.com/gx-org/gx/stdlib/bindings/go/num_go_gx"
	gxdep2 "github.com/gx-org/gx/stdlib/bindings/go/shapes_go_gx"
)

// Force some package dependencies.
var (
	_ = fmt.Println
	_ = strings.Compare
	_ = reflect.TypeFor[int]
	_ = values.Struct{}
	_ = errors.Errorf
	_ = types.NewSlice[types.Bridger]
	_ = platform.HostTransfer
	_ = ir.NamedType{}
	_ = tracer.Trace
)

// Load the package for a given runtime.
func Load(rtm *api.Runtime) (*core.Package, error) {
	bpkg, err := rtm.Builder().Build("github.com/gx-org/gemma/gemma")
	if err != nil {
		return nil, err
	}
	deps := make([]*core.Package, 3)
	deps[0], err = gxdep0.Load(rtm)
	if err != nil {
		return nil, err
	}
	deps[1], err = gxdep1.Load(rtm)
	if err != nil {
		return nil, err
	}
	deps[2], err = gxdep2.Load(rtm)
	if err != nil {
		return nil, err
	}
	return core.NewPackage(bpkg, deps), nil
}

// BuildFor loads the GX package github.com/gx-org/gemma/gemma
// then returns that package for a given device and options.
func BuildFor(dev *api.Device, opts ...options.PackageOptionFactory) (*Package, error) {
	pkgHandle, err := BuildHandleFor(dev, opts...)
	if err != nil {
		return nil, err
	}
	return pkgHandle.Factory.Package, nil
}

// BuildHandleFor loads the GX package github.com/gx-org/gemma/gemma
// then returns that package for a given device and options.
func BuildHandleFor(dev *api.Device, opts ...options.PackageOptionFactory) (*PackageHandle, error) {
	pkg, err := Load(dev.Runtime())
	if err != nil {
		return nil, err
	}
	return BuildFromIR(pkg, dev, opts)
}

// Factory create new instance of types used in the package.
// The compiler associated with the factory defines on what
// device and with which options methods of the instances
// created by the factory are compiled for.
type Factory struct {
	Package *Package
}

// PackageHandle provides utility functions for the package.
type PackageHandle struct {
	*core.PackageCompileSetup
	Factory *Factory

	// Package dependencies
	gxdep0 *gxdep0.PackageHandle
	gxdep1 *gxdep1.PackageHandle
	gxdep2 *gxdep2.PackageHandle
}

// Package is a GX package for a given device.
// Functions and methods are compiled specifically for that device.
type Package struct {
	handle PackageHandle

	// Functions and methods cache
	cacheGemmaNewSamplingState  *core.FuncCache
	cacheGemmaSampleStep        *core.FuncCache
	cacheGemma3NewSamplingState *core.FuncCache
	cacheGemma3SampleStep       *core.FuncCache
}

// BuildFromIR builds a package for a device once it has been loaded.
func BuildFromIR(irPkg *core.Package, dev *api.Device, optionFactories []options.PackageOptionFactory) (*PackageHandle, error) {
	pkg := &Package{}
	pkg.handle.Factory = &Factory{Package: pkg}
	pkg.handle.PackageCompileSetup = irPkg.Setup(dev, optionFactories)
	// Build dependencies.
	var err error
	pkg.handle.gxdep0, err = core.BuildDep[*gxdep0.PackageHandle](
		pkg.handle.PackageCompileSetup,
		0,
		gxdep0.BuildFromIR,
	)
	if err != nil {
		return nil, err
	}
	pkg.handle.gxdep1, err = core.BuildDep[*gxdep1.PackageHandle](
		pkg.handle.PackageCompileSetup,
		1,
		gxdep1.BuildFromIR,
	)
	if err != nil {
		return nil, err
	}
	pkg.handle.gxdep2, err = core.BuildDep[*gxdep2.PackageHandle](
		pkg.handle.PackageCompileSetup,
		2,
		gxdep2.BuildFromIR,
	)
	if err != nil {
		return nil, err
	}

	// Initialise function and method caches.
	pkg.cacheGemmaNewSamplingState, err = pkg.handle.NewCache("Gemma", "NewSamplingState")
	if err != nil {
		return nil, err
	}
	pkg.cacheGemmaSampleStep, err = pkg.handle.NewCache("Gemma", "SampleStep")
	if err != nil {
		return nil, err
	}
	pkg.cacheGemma3NewSamplingState, err = pkg.handle.NewCache("Gemma3", "NewSamplingState")
	if err != nil {
		return nil, err
	}
	pkg.cacheGemma3SampleStep, err = pkg.handle.NewCache("Gemma3", "SampleStep")
	if err != nil {
		return nil, err
	}

	return &pkg.handle, err
}

var VocabSize VocabSizeStatic

type VocabSizeStatic struct {
	value ir.Int
}

func (VocabSizeStatic) Set(value ir.Int) options.PackageOptionFactory {
	return func(plat platform.Platform) options.PackageOption {
		hostValue := types.DefaultInt(value)
		return options.PackageVarSetValue{
			Pkg:   "github.com/gx-org/gemma/gemma",
			Var:   "VocabSize",
			Value: hostValue.GXValue(),
		}
	}
}

var ModelDim ModelDimStatic

type ModelDimStatic struct {
	value ir.Int
}

func (ModelDimStatic) Set(value ir.Int) options.PackageOptionFactory {
	return func(plat platform.Platform) options.PackageOption {
		hostValue := types.DefaultInt(value)
		return options.PackageVarSetValue{
			Pkg:   "github.com/gx-org/gemma/gemma",
			Var:   "ModelDim",
			Value: hostValue.GXValue(),
		}
	}
}

var FFHiddenDim FFHiddenDimStatic

type FFHiddenDimStatic struct {
	value ir.Int
}

func (FFHiddenDimStatic) Set(value ir.Int) options.PackageOptionFactory {
	return func(plat platform.Platform) options.PackageOption {
		hostValue := types.DefaultInt(value)
		return options.PackageVarSetValue{
			Pkg:   "github.com/gx-org/gemma/gemma",
			Var:   "FFHiddenDim",
			Value: hostValue.GXValue(),
		}
	}
}

var QKVDim QKVDimStatic

type QKVDimStatic struct {
	value ir.Int
}

func (QKVDimStatic) Set(value ir.Int) options.PackageOptionFactory {
	return func(plat platform.Platform) options.PackageOption {
		hostValue := types.DefaultInt(value)
		return options.PackageVarSetValue{
			Pkg:   "github.com/gx-org/gemma/gemma",
			Var:   "QKVDim",
			Value: hostValue.GXValue(),
		}
	}
}

var NumHeads NumHeadsStatic

type NumHeadsStatic struct {
	value ir.Int
}

func (NumHeadsStatic) Set(value ir.Int) options.PackageOptionFactory {
	return func(plat platform.Platform) options.PackageOption {
		hostValue := types.DefaultInt(value)
		return options.PackageVarSetValue{
			Pkg:   "github.com/gx-org/gemma/gemma",
			Var:   "NumHeads",
			Value: hostValue.GXValue(),
		}
	}
}

var NumGemmaLayers NumGemmaLayersStatic

type NumGemmaLayersStatic struct {
	value ir.Int
}

func (NumGemmaLayersStatic) Set(value ir.Int) options.PackageOptionFactory {
	return func(plat platform.Platform) options.PackageOption {
		hostValue := types.DefaultInt(value)
		return options.PackageVarSetValue{
			Pkg:   "github.com/gx-org/gemma/gemma",
			Var:   "NumGemmaLayers",
			Value: hostValue.GXValue(),
		}
	}
}

var NumSamplingSteps NumSamplingStepsStatic

type NumSamplingStepsStatic struct {
	value ir.Int
}

func (NumSamplingStepsStatic) Set(value ir.Int) options.PackageOptionFactory {
	return func(plat platform.Platform) options.PackageOption {
		hostValue := types.DefaultInt(value)
		return options.PackageVarSetValue{
			Pkg:   "github.com/gx-org/gemma/gemma",
			Var:   "NumSamplingSteps",
			Value: hostValue.GXValue(),
		}
	}
}

var PromptLength PromptLengthStatic

type PromptLengthStatic struct {
	value ir.Int
}

func (PromptLengthStatic) Set(value ir.Int) options.PackageOptionFactory {
	return func(plat platform.Platform) options.PackageOption {
		hostValue := types.DefaultInt(value)
		return options.PackageVarSetValue{
			Pkg:   "github.com/gx-org/gemma/gemma",
			Var:   "PromptLength",
			Value: hostValue.GXValue(),
		}
	}
}

// handleLayer stores the backend handles of Layer.
type handleLayer struct {
	pkg   *Package
	struc *ir.NamedType
	owner *Layer
}

// Type of the value.
func (h *handleLayer) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleLayer) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleLayer) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleLayer) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleLayer) String() string {
	bld := strings.Builder{}
	bld.WriteString("Layer{\n")

	fmt.Fprintf(&bld, "%s:%s\n", "PreAttNorm", any(h.owner.PreAttNorm).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "Attention", any(h.owner.Attention).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "Queries", any(h.owner.Queries).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "Keys", any(h.owner.Keys).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "Values", any(h.owner.Values).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "PreNorm", any(h.owner.PreNorm).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "UpGate", any(h.owner.UpGate).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "UpLinear", any(h.owner.UpLinear).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "DownLinear", any(h.owner.DownLinear).(fmt.Stringer).String())

	bld.WriteString("}")
	return bld.String()
}

// Layer stores the handle of Layer on a device.
type Layer struct {
	handle handleLayer
	value  *values.NamedType

	PreAttNorm types.Array[float32]
	Attention  types.Array[float32]
	Queries    types.Array[float32]
	Keys       types.Array[float32]
	Values     types.Array[float32]
	PreNorm    types.Array[float32]
	UpGate     types.Array[float32]
	UpLinear   types.Array[float32]
	DownLinear types.Array[float32]
}

var (
	_ types.Bridger      = (*Layer)(nil)
	_ types.StructBridge = (*handleLayer)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handleLayer) StructValue() *values.Struct {
	return h.owner.value.Underlying().(*values.Struct)
}

// MarshalLayer populates the receiver fields with device handles.
func (fty *Factory) MarshalLayer(val values.Value) (s *Layer, err error) {
	s = fty.NewLayer()
	var ok bool
	s.value, ok = val.(*values.NamedType)
	if !ok {
		err = errors.Errorf("cannot use handle to set Layer: %T is not a %s", val, reflect.TypeFor[*values.NamedType]())
		return
	}
	structVal, ok := s.value.Underlying().(*values.Struct)
	if !ok {
		err = errors.Errorf("incorrect underlying value for named type Layer: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, structVal.StructType().NumFields())
	for i, field := range structVal.StructType().Fields.Fields() {
		fields[i] = structVal.FieldValue(field.Name.Name)
	}

	field0Value, ok := fields[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field0 := types.NewArray[float32](field0Value)

	field1Value, ok := fields[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field1 := types.NewArray[float32](field1Value)

	field2Value, ok := fields[2].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[2], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field2 := types.NewArray[float32](field2Value)

	field3Value, ok := fields[3].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[3], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field3 := types.NewArray[float32](field3Value)

	field4Value, ok := fields[4].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[4], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field4 := types.NewArray[float32](field4Value)

	field5Value, ok := fields[5].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[5], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field5 := types.NewArray[float32](field5Value)

	field6Value, ok := fields[6].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[6], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field6 := types.NewArray[float32](field6Value)

	field7Value, ok := fields[7].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[7], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field7 := types.NewArray[float32](field7Value)

	field8Value, ok := fields[8].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[8], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field8 := types.NewArray[float32](field8Value)

	s.PreAttNorm = field0
	s.Attention = field1
	s.Queries = field2
	s.Keys = field3
	s.Values = field4
	s.PreNorm = field5
	s.UpGate = field6
	s.UpLinear = field7
	s.DownLinear = field8
	return
}

func (s Layer) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *Layer) Bridge() types.Bridge { return &s.handle }

// NewLayer returns a handle on named type Layer.
func (fac *Factory) NewLayer() *Layer {
	s := &Layer{}
	typ := fac.Package.handle.IR().Decls.TypeByName("Layer")
	s.handle = handleLayer{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	structVal, err := values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}
	s.value = values.NewNamedType(structVal, typ)

	return s
}

var _ types.Bridge = (*handleLayer)(nil)

func (h *handleLayer) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {
	case "PreAttNorm":
		return nil, errors.Errorf("cannot create a new instance for field PreAttNorm: type types.Array[float32] not supported")
	case "Attention":
		return nil, errors.Errorf("cannot create a new instance for field Attention: type types.Array[float32] not supported")
	case "Queries":
		return nil, errors.Errorf("cannot create a new instance for field Queries: type types.Array[float32] not supported")
	case "Keys":
		return nil, errors.Errorf("cannot create a new instance for field Keys: type types.Array[float32] not supported")
	case "Values":
		return nil, errors.Errorf("cannot create a new instance for field Values: type types.Array[float32] not supported")
	case "PreNorm":
		return nil, errors.Errorf("cannot create a new instance for field PreNorm: type types.Array[float32] not supported")
	case "UpGate":
		return nil, errors.Errorf("cannot create a new instance for field UpGate: type types.Array[float32] not supported")
	case "UpLinear":
		return nil, errors.Errorf("cannot create a new instance for field UpLinear: type types.Array[float32] not supported")
	case "DownLinear":
		return nil, errors.Errorf("cannot create a new instance for field DownLinear: type types.Array[float32] not supported")

	default:
		return nil, errors.Errorf("structure Layer has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleLayer) SetField(field *ir.Field, val types.Bridge) error {

	name := field.Name.Name
	structVal, ok := h.owner.value.Underlying().(*values.Struct)
	if !ok {
		return fmt.Errorf("incorrect underlying value for named type Layer: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
	}
	switch name {

	case "PreAttNorm":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field PreAttNorm: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.PreAttNorm = fieldValue
		structVal.SetField("PreAttNorm", val.GXValue())
		return nil

	case "Attention":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field Attention: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.Attention = fieldValue
		structVal.SetField("Attention", val.GXValue())
		return nil

	case "Queries":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field Queries: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.Queries = fieldValue
		structVal.SetField("Queries", val.GXValue())
		return nil

	case "Keys":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field Keys: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.Keys = fieldValue
		structVal.SetField("Keys", val.GXValue())
		return nil

	case "Values":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field Values: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.Values = fieldValue
		structVal.SetField("Values", val.GXValue())
		return nil

	case "PreNorm":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field PreNorm: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.PreNorm = fieldValue
		structVal.SetField("PreNorm", val.GXValue())
		return nil

	case "UpGate":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field UpGate: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.UpGate = fieldValue
		structVal.SetField("UpGate", val.GXValue())
		return nil

	case "UpLinear":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field UpLinear: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.UpLinear = fieldValue
		structVal.SetField("UpLinear", val.GXValue())
		return nil

	case "DownLinear":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field DownLinear: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.DownLinear = fieldValue
		structVal.SetField("DownLinear", val.GXValue())
		return nil

	default:
		return errors.Errorf("structure Layer has no field %q", name)
	}

}

// handleGemma stores the backend handles of Gemma.
type handleGemma struct {
	pkg   *Package
	struc *ir.NamedType
	owner *Gemma
}

// Type of the value.
func (h *handleGemma) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleGemma) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleGemma) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleGemma) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleGemma) String() string {
	bld := strings.Builder{}
	bld.WriteString("Gemma{\n")

	fmt.Fprintf(&bld, "%s:%s\n", "TokenEmbedding", any(h.owner.TokenEmbedding).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "Layers", any(h.owner.Layers).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "FinalNormScale", any(h.owner.FinalNormScale).(fmt.Stringer).String())

	bld.WriteString("}")
	return bld.String()
}

// Gemma stores the handle of Gemma on a device.
type Gemma struct {
	handle handleGemma
	value  *values.NamedType

	TokenEmbedding types.Array[float32]
	Layers         *types.Slice[*Layer]
	FinalNormScale types.Array[float32]
}

var (
	_ types.Bridger      = (*Gemma)(nil)
	_ types.StructBridge = (*handleGemma)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handleGemma) StructValue() *values.Struct {
	return h.owner.value.Underlying().(*values.Struct)
}

// MarshalGemma populates the receiver fields with device handles.
func (fty *Factory) MarshalGemma(val values.Value) (s *Gemma, err error) {
	s = fty.NewGemma()
	var ok bool
	s.value, ok = val.(*values.NamedType)
	if !ok {
		err = errors.Errorf("cannot use handle to set Gemma: %T is not a %s", val, reflect.TypeFor[*values.NamedType]())
		return
	}
	structVal, ok := s.value.Underlying().(*values.Struct)
	if !ok {
		err = errors.Errorf("incorrect underlying value for named type Gemma: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, structVal.StructType().NumFields())
	for i, field := range structVal.StructType().Fields.Fields() {
		fields[i] = structVal.FieldValue(field.Name.Name)
	}

	field0Value, ok := fields[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field0 := types.NewArray[float32](field0Value)

	field1Slice, ok := fields[1].(*values.Slice)
	if !ok {
		err = fmt.Errorf("cannot use value %T to set []<no value>: not a slice", fields[1])
		return
	}
	field1Elements := make([]*Layer, field1Slice.Len())
	for i := 0; i < field1Slice.Len(); i++ {
		field1HandleI := field1Slice.Element(i)
		var field1ElmtI *Layer
		field1ElmtI, err = fty.MarshalLayer(field1HandleI)
		if err != nil {
			return
		}
		field1Elements[i] = field1ElmtI
	}
	field1, err := types.NewSlice[*Layer](
		field1Slice.SliceType(),
		field1Elements,
	)
	if err != nil {
		return nil, err
	}

	field2Value, ok := fields[2].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[2], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field2 := types.NewArray[float32](field2Value)

	s.TokenEmbedding = field0
	s.Layers = field1
	s.FinalNormScale = field2
	return
}

func (s Gemma) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *Gemma) Bridge() types.Bridge { return &s.handle }

// NewGemma returns a handle on named type Gemma.
func (fac *Factory) NewGemma() *Gemma {
	s := &Gemma{}
	typ := fac.Package.handle.IR().Decls.TypeByName("Gemma")
	s.handle = handleGemma{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	structVal, err := values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}
	s.value = values.NewNamedType(structVal, typ)

	return s
}

var _ types.Bridge = (*handleGemma)(nil)

func (h *handleGemma) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {
	case "TokenEmbedding":
		return nil, errors.Errorf("cannot create a new instance for field TokenEmbedding: type types.Array[float32] not supported")
	case "Layers":
		slice, err := types.NewEmptySlice[*Layer](field.Type(), func() (types.Bridge, error) {
			return h.pkg.handle.Factory.NewLayer().Bridge(), nil
		})
		if err != nil {
			return nil, err
		}
		return slice.Bridge(), nil
	case "FinalNormScale":
		return nil, errors.Errorf("cannot create a new instance for field FinalNormScale: type types.Array[float32] not supported")

	default:
		return nil, errors.Errorf("structure Gemma has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleGemma) SetField(field *ir.Field, val types.Bridge) error {

	name := field.Name.Name
	structVal, ok := h.owner.value.Underlying().(*values.Struct)
	if !ok {
		return fmt.Errorf("incorrect underlying value for named type Gemma: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
	}
	switch name {

	case "TokenEmbedding":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field TokenEmbedding: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.TokenEmbedding = fieldValue
		structVal.SetField("TokenEmbedding", val.GXValue())
		return nil

	case "Layers":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(*types.Slice[*Layer])
		if !ok {
			return errors.Errorf("cannot set field Layers: cannot cast %T to *types.Slice[*Layer]", bridger)
		}
		h.owner.Layers = fieldValue
		structVal.SetField("Layers", val.GXValue())
		return nil

	case "FinalNormScale":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field FinalNormScale: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.FinalNormScale = fieldValue
		structVal.SetField("FinalNormScale", val.GXValue())
		return nil

	default:
		return errors.Errorf("structure Gemma has no field %q", name)
	}

}

// NewSamplingState returns a new sampling state from the initial prompt.
func (recv *Gemma) NewSamplingState(arg0 types.Array[int32]) (_ *SamplingState, _ types.Array[float32], _ types.Atom[int64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // prompt [NumSamplingSteps+1]int32
	}
	var runner tracer.CompiledFunc
	runner, err = recv.handle.pkg.cacheGemmaNewSamplingState.Runner(recv.value, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(recv.value, args, recv.handle.pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := recv.handle.pkg.handle.Factory

	var out0 *SamplingState
	out0, err = fty.MarshalSamplingState(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[float32](out1Value)

	out2Value, ok := outputs[2].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[2], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out2 := types.NewAtom[int64](out2Value)

	return out0, out1, out2, nil
}

// SampleStep runs a sample step and returns the new state.
func (recv *Gemma) SampleStep(arg0 *SamplingState) (_ *SamplingState, _ types.Array[float32], _ types.Atom[int64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // state gemma.SamplingState
	}
	var runner tracer.CompiledFunc
	runner, err = recv.handle.pkg.cacheGemmaSampleStep.Runner(recv.value, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(recv.value, args, recv.handle.pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := recv.handle.pkg.handle.Factory

	var out0 *SamplingState
	out0, err = fty.MarshalSamplingState(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[float32](out1Value)

	out2Value, ok := outputs[2].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[2], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out2 := types.NewAtom[int64](out2Value)

	return out0, out1, out2, nil
}

// handleKVCache stores the backend handles of KVCache.
type handleKVCache struct {
	pkg   *Package
	struc *ir.NamedType
	owner *KVCache
}

// Type of the value.
func (h *handleKVCache) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleKVCache) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleKVCache) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleKVCache) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleKVCache) String() string {
	bld := strings.Builder{}
	bld.WriteString("KVCache{\n")

	fmt.Fprintf(&bld, "%s:%s\n", "ks", any(h.owner.ks).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "vs", any(h.owner.vs).(fmt.Stringer).String())

	bld.WriteString("}")
	return bld.String()
}

// KVCache stores the handle of KVCache on a device.
type KVCache struct {
	handle handleKVCache
	value  *values.NamedType

	ks types.Array[float32]
	vs types.Array[float32]
}

var (
	_ types.Bridger      = (*KVCache)(nil)
	_ types.StructBridge = (*handleKVCache)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handleKVCache) StructValue() *values.Struct {
	return h.owner.value.Underlying().(*values.Struct)
}

// MarshalKVCache populates the receiver fields with device handles.
func (fty *Factory) MarshalKVCache(val values.Value) (s *KVCache, err error) {
	s = fty.NewKVCache()
	var ok bool
	s.value, ok = val.(*values.NamedType)
	if !ok {
		err = errors.Errorf("cannot use handle to set KVCache: %T is not a %s", val, reflect.TypeFor[*values.NamedType]())
		return
	}
	structVal, ok := s.value.Underlying().(*values.Struct)
	if !ok {
		err = errors.Errorf("incorrect underlying value for named type KVCache: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, structVal.StructType().NumFields())
	for i, field := range structVal.StructType().Fields.Fields() {
		fields[i] = structVal.FieldValue(field.Name.Name)
	}

	field0Value, ok := fields[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field0 := types.NewArray[float32](field0Value)

	field1Value, ok := fields[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field1 := types.NewArray[float32](field1Value)

	s.ks = field0
	s.vs = field1
	return
}

func (s KVCache) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *KVCache) Bridge() types.Bridge { return &s.handle }

// NewKVCache returns a handle on named type KVCache.
func (fac *Factory) NewKVCache() *KVCache {
	s := &KVCache{}
	typ := fac.Package.handle.IR().Decls.TypeByName("KVCache")
	s.handle = handleKVCache{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	structVal, err := values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}
	s.value = values.NewNamedType(structVal, typ)

	return s
}

var _ types.Bridge = (*handleKVCache)(nil)

func (h *handleKVCache) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {
	case "ks":
		return nil, errors.Errorf("cannot create a new instance for field ks: type types.Array[float32] not supported")
	case "vs":
		return nil, errors.Errorf("cannot create a new instance for field vs: type types.Array[float32] not supported")

	default:
		return nil, errors.Errorf("structure KVCache has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleKVCache) SetField(field *ir.Field, val types.Bridge) error {

	name := field.Name.Name
	structVal, ok := h.owner.value.Underlying().(*values.Struct)
	if !ok {
		return fmt.Errorf("incorrect underlying value for named type KVCache: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
	}
	switch name {

	case "ks":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field ks: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.ks = fieldValue
		structVal.SetField("ks", val.GXValue())
		return nil

	case "vs":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field vs: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.vs = fieldValue
		structVal.SetField("vs", val.GXValue())
		return nil

	default:
		return errors.Errorf("structure KVCache has no field %q", name)
	}

}

// handleSamplingState stores the backend handles of SamplingState.
type handleSamplingState struct {
	pkg   *Package
	struc *ir.NamedType
	owner *SamplingState
}

// Type of the value.
func (h *handleSamplingState) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleSamplingState) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleSamplingState) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleSamplingState) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleSamplingState) String() string {
	bld := strings.Builder{}
	bld.WriteString("SamplingState{\n")

	fmt.Fprintf(&bld, "%s:%s\n", "step", any(h.owner.step).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "x", any(h.owner.x).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "token", any(h.owner.token).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "cache", any(h.owner.cache).(fmt.Stringer).String())

	bld.WriteString("}")
	return bld.String()
}

// SamplingState stores the handle of SamplingState on a device.
type SamplingState struct {
	handle handleSamplingState
	value  *values.NamedType

	step  types.Atom[int64]
	x     types.Array[float32]
	token types.Atom[int64]
	cache *KVCache
}

var (
	_ types.Bridger      = (*SamplingState)(nil)
	_ types.StructBridge = (*handleSamplingState)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handleSamplingState) StructValue() *values.Struct {
	return h.owner.value.Underlying().(*values.Struct)
}

// MarshalSamplingState populates the receiver fields with device handles.
func (fty *Factory) MarshalSamplingState(val values.Value) (s *SamplingState, err error) {
	s = fty.NewSamplingState()
	var ok bool
	s.value, ok = val.(*values.NamedType)
	if !ok {
		err = errors.Errorf("cannot use handle to set SamplingState: %T is not a %s", val, reflect.TypeFor[*values.NamedType]())
		return
	}
	structVal, ok := s.value.Underlying().(*values.Struct)
	if !ok {
		err = errors.Errorf("incorrect underlying value for named type SamplingState: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, structVal.StructType().NumFields())
	for i, field := range structVal.StructType().Fields.Fields() {
		fields[i] = structVal.FieldValue(field.Name.Name)
	}

	field0Value, ok := fields[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field0 := types.NewAtom[int64](field0Value)

	field1Value, ok := fields[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field1 := types.NewArray[float32](field1Value)

	field2Value, ok := fields[2].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[2], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field2 := types.NewAtom[int64](field2Value)

	var field3 *KVCache
	field3, err = fty.MarshalKVCache(fields[3])
	if err != nil {
		return
	}
	s.step = field0
	s.x = field1
	s.token = field2
	s.cache = field3
	return
}

func (s SamplingState) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *SamplingState) Bridge() types.Bridge { return &s.handle }

// NewSamplingState returns a handle on named type SamplingState.
func (fac *Factory) NewSamplingState() *SamplingState {
	s := &SamplingState{}
	typ := fac.Package.handle.IR().Decls.TypeByName("SamplingState")
	s.handle = handleSamplingState{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	structVal, err := values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}
	s.value = values.NewNamedType(structVal, typ)

	return s
}

var _ types.Bridge = (*handleSamplingState)(nil)

func (h *handleSamplingState) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {
	case "step":
		return nil, errors.Errorf("cannot create a new instance for field step: type types.Atom[int64] not supported")
	case "x":
		return nil, errors.Errorf("cannot create a new instance for field x: type types.Array[float32] not supported")
	case "token":
		return nil, errors.Errorf("cannot create a new instance for field token: type types.Atom[int64] not supported")
	case "cache":
		return h.pkg.handle.Factory.NewKVCache().Bridge(), nil

	default:
		return nil, errors.Errorf("structure SamplingState has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleSamplingState) SetField(field *ir.Field, val types.Bridge) error {

	name := field.Name.Name
	structVal, ok := h.owner.value.Underlying().(*values.Struct)
	if !ok {
		return fmt.Errorf("incorrect underlying value for named type SamplingState: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
	}
	switch name {

	case "step":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[int64])
		if !ok {
			return errors.Errorf("cannot set field step: cannot cast %T to types.Atom[int64]", bridger)
		}
		h.owner.step = fieldValue
		structVal.SetField("step", val.GXValue())
		return nil

	case "x":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field x: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.x = fieldValue
		structVal.SetField("x", val.GXValue())
		return nil

	case "token":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[int64])
		if !ok {
			return errors.Errorf("cannot set field token: cannot cast %T to types.Atom[int64]", bridger)
		}
		h.owner.token = fieldValue
		structVal.SetField("token", val.GXValue())
		return nil

	case "cache":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(*KVCache)
		if !ok {
			return errors.Errorf("cannot set field cache: cannot cast %T to *KVCache", bridger)
		}
		h.owner.cache = fieldValue
		structVal.SetField("cache", val.GXValue())
		return nil

	default:
		return errors.Errorf("structure SamplingState has no field %q", name)
	}

}

// handleGemma3Layer stores the backend handles of Gemma3Layer.
type handleGemma3Layer struct {
	pkg   *Package
	struc *ir.NamedType
	owner *Gemma3Layer
}

// Type of the value.
func (h *handleGemma3Layer) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleGemma3Layer) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleGemma3Layer) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleGemma3Layer) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleGemma3Layer) String() string {
	bld := strings.Builder{}
	bld.WriteString("Gemma3Layer{\n")

	fmt.Fprintf(&bld, "%s:%s\n", "PreAttNorm", any(h.owner.PreAttNorm).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "QueryNorm", any(h.owner.QueryNorm).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "KeyNorm", any(h.owner.KeyNorm).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "PostAttNorm", any(h.owner.PostAttNorm).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "Attention", any(h.owner.Attention).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "Queries", any(h.owner.Queries).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "Keys", any(h.owner.Keys).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "Values", any(h.owner.Values).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "PreNorm", any(h.owner.PreNorm).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "UpGate", any(h.owner.UpGate).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "UpLinear", any(h.owner.UpLinear).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "DownLinear", any(h.owner.DownLinear).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "PostNorm", any(h.owner.PostNorm).(fmt.Stringer).String())

	bld.WriteString("}")
	return bld.String()
}

// Gemma3Layer stores the handle of Gemma3Layer on a device.
type Gemma3Layer struct {
	handle handleGemma3Layer
	value  *values.NamedType

	PreAttNorm  types.Array[float32]
	QueryNorm   types.Array[float32]
	KeyNorm     types.Array[float32]
	PostAttNorm types.Array[float32]
	Attention   types.Array[float32]
	Queries     types.Array[float32]
	Keys        types.Array[float32]
	Values      types.Array[float32]
	PreNorm     types.Array[float32]
	UpGate      types.Array[float32]
	UpLinear    types.Array[float32]
	DownLinear  types.Array[float32]
	PostNorm    types.Array[float32]
}

var (
	_ types.Bridger      = (*Gemma3Layer)(nil)
	_ types.StructBridge = (*handleGemma3Layer)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handleGemma3Layer) StructValue() *values.Struct {
	return h.owner.value.Underlying().(*values.Struct)
}

// MarshalGemma3Layer populates the receiver fields with device handles.
func (fty *Factory) MarshalGemma3Layer(val values.Value) (s *Gemma3Layer, err error) {
	s = fty.NewGemma3Layer()
	var ok bool
	s.value, ok = val.(*values.NamedType)
	if !ok {
		err = errors.Errorf("cannot use handle to set Gemma3Layer: %T is not a %s", val, reflect.TypeFor[*values.NamedType]())
		return
	}
	structVal, ok := s.value.Underlying().(*values.Struct)
	if !ok {
		err = errors.Errorf("incorrect underlying value for named type Gemma3Layer: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, structVal.StructType().NumFields())
	for i, field := range structVal.StructType().Fields.Fields() {
		fields[i] = structVal.FieldValue(field.Name.Name)
	}

	field0Value, ok := fields[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field0 := types.NewArray[float32](field0Value)

	field1Value, ok := fields[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field1 := types.NewArray[float32](field1Value)

	field2Value, ok := fields[2].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[2], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field2 := types.NewArray[float32](field2Value)

	field3Value, ok := fields[3].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[3], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field3 := types.NewArray[float32](field3Value)

	field4Value, ok := fields[4].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[4], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field4 := types.NewArray[float32](field4Value)

	field5Value, ok := fields[5].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[5], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field5 := types.NewArray[float32](field5Value)

	field6Value, ok := fields[6].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[6], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field6 := types.NewArray[float32](field6Value)

	field7Value, ok := fields[7].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[7], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field7 := types.NewArray[float32](field7Value)

	field8Value, ok := fields[8].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[8], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field8 := types.NewArray[float32](field8Value)

	field9Value, ok := fields[9].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[9], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field9 := types.NewArray[float32](field9Value)

	field10Value, ok := fields[10].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[10], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field10 := types.NewArray[float32](field10Value)

	field11Value, ok := fields[11].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[11], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field11 := types.NewArray[float32](field11Value)

	field12Value, ok := fields[12].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[12], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field12 := types.NewArray[float32](field12Value)

	s.PreAttNorm = field0
	s.QueryNorm = field1
	s.KeyNorm = field2
	s.PostAttNorm = field3
	s.Attention = field4
	s.Queries = field5
	s.Keys = field6
	s.Values = field7
	s.PreNorm = field8
	s.UpGate = field9
	s.UpLinear = field10
	s.DownLinear = field11
	s.PostNorm = field12
	return
}

func (s Gemma3Layer) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *Gemma3Layer) Bridge() types.Bridge { return &s.handle }

// NewGemma3Layer returns a handle on named type Gemma3Layer.
func (fac *Factory) NewGemma3Layer() *Gemma3Layer {
	s := &Gemma3Layer{}
	typ := fac.Package.handle.IR().Decls.TypeByName("Gemma3Layer")
	s.handle = handleGemma3Layer{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	structVal, err := values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}
	s.value = values.NewNamedType(structVal, typ)

	return s
}

var _ types.Bridge = (*handleGemma3Layer)(nil)

func (h *handleGemma3Layer) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {
	case "PreAttNorm":
		return nil, errors.Errorf("cannot create a new instance for field PreAttNorm: type types.Array[float32] not supported")
	case "QueryNorm":
		return nil, errors.Errorf("cannot create a new instance for field QueryNorm: type types.Array[float32] not supported")
	case "KeyNorm":
		return nil, errors.Errorf("cannot create a new instance for field KeyNorm: type types.Array[float32] not supported")
	case "PostAttNorm":
		return nil, errors.Errorf("cannot create a new instance for field PostAttNorm: type types.Array[float32] not supported")
	case "Attention":
		return nil, errors.Errorf("cannot create a new instance for field Attention: type types.Array[float32] not supported")
	case "Queries":
		return nil, errors.Errorf("cannot create a new instance for field Queries: type types.Array[float32] not supported")
	case "Keys":
		return nil, errors.Errorf("cannot create a new instance for field Keys: type types.Array[float32] not supported")
	case "Values":
		return nil, errors.Errorf("cannot create a new instance for field Values: type types.Array[float32] not supported")
	case "PreNorm":
		return nil, errors.Errorf("cannot create a new instance for field PreNorm: type types.Array[float32] not supported")
	case "UpGate":
		return nil, errors.Errorf("cannot create a new instance for field UpGate: type types.Array[float32] not supported")
	case "UpLinear":
		return nil, errors.Errorf("cannot create a new instance for field UpLinear: type types.Array[float32] not supported")
	case "DownLinear":
		return nil, errors.Errorf("cannot create a new instance for field DownLinear: type types.Array[float32] not supported")
	case "PostNorm":
		return nil, errors.Errorf("cannot create a new instance for field PostNorm: type types.Array[float32] not supported")

	default:
		return nil, errors.Errorf("structure Gemma3Layer has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleGemma3Layer) SetField(field *ir.Field, val types.Bridge) error {

	name := field.Name.Name
	structVal, ok := h.owner.value.Underlying().(*values.Struct)
	if !ok {
		return fmt.Errorf("incorrect underlying value for named type Gemma3Layer: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
	}
	switch name {

	case "PreAttNorm":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field PreAttNorm: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.PreAttNorm = fieldValue
		structVal.SetField("PreAttNorm", val.GXValue())
		return nil

	case "QueryNorm":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field QueryNorm: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.QueryNorm = fieldValue
		structVal.SetField("QueryNorm", val.GXValue())
		return nil

	case "KeyNorm":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field KeyNorm: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.KeyNorm = fieldValue
		structVal.SetField("KeyNorm", val.GXValue())
		return nil

	case "PostAttNorm":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field PostAttNorm: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.PostAttNorm = fieldValue
		structVal.SetField("PostAttNorm", val.GXValue())
		return nil

	case "Attention":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field Attention: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.Attention = fieldValue
		structVal.SetField("Attention", val.GXValue())
		return nil

	case "Queries":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field Queries: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.Queries = fieldValue
		structVal.SetField("Queries", val.GXValue())
		return nil

	case "Keys":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field Keys: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.Keys = fieldValue
		structVal.SetField("Keys", val.GXValue())
		return nil

	case "Values":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field Values: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.Values = fieldValue
		structVal.SetField("Values", val.GXValue())
		return nil

	case "PreNorm":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field PreNorm: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.PreNorm = fieldValue
		structVal.SetField("PreNorm", val.GXValue())
		return nil

	case "UpGate":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field UpGate: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.UpGate = fieldValue
		structVal.SetField("UpGate", val.GXValue())
		return nil

	case "UpLinear":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field UpLinear: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.UpLinear = fieldValue
		structVal.SetField("UpLinear", val.GXValue())
		return nil

	case "DownLinear":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field DownLinear: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.DownLinear = fieldValue
		structVal.SetField("DownLinear", val.GXValue())
		return nil

	case "PostNorm":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field PostNorm: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.PostNorm = fieldValue
		structVal.SetField("PostNorm", val.GXValue())
		return nil

	default:
		return errors.Errorf("structure Gemma3Layer has no field %q", name)
	}

}

// handleGemma3 stores the backend handles of Gemma3.
type handleGemma3 struct {
	pkg   *Package
	struc *ir.NamedType
	owner *Gemma3
}

// Type of the value.
func (h *handleGemma3) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleGemma3) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleGemma3) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleGemma3) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleGemma3) String() string {
	bld := strings.Builder{}
	bld.WriteString("Gemma3{\n")

	fmt.Fprintf(&bld, "%s:%s\n", "TokenEmbedding", any(h.owner.TokenEmbedding).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "Layers", any(h.owner.Layers).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "FinalNormScale", any(h.owner.FinalNormScale).(fmt.Stringer).String())

	bld.WriteString("}")
	return bld.String()
}

// Gemma3 stores the handle of Gemma3 on a device.
type Gemma3 struct {
	handle handleGemma3
	value  *values.NamedType

	TokenEmbedding types.Array[float32]
	Layers         *types.Slice[*Gemma3Layer]
	FinalNormScale types.Array[float32]
}

var (
	_ types.Bridger      = (*Gemma3)(nil)
	_ types.StructBridge = (*handleGemma3)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handleGemma3) StructValue() *values.Struct {
	return h.owner.value.Underlying().(*values.Struct)
}

// MarshalGemma3 populates the receiver fields with device handles.
func (fty *Factory) MarshalGemma3(val values.Value) (s *Gemma3, err error) {
	s = fty.NewGemma3()
	var ok bool
	s.value, ok = val.(*values.NamedType)
	if !ok {
		err = errors.Errorf("cannot use handle to set Gemma3: %T is not a %s", val, reflect.TypeFor[*values.NamedType]())
		return
	}
	structVal, ok := s.value.Underlying().(*values.Struct)
	if !ok {
		err = errors.Errorf("incorrect underlying value for named type Gemma3: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, structVal.StructType().NumFields())
	for i, field := range structVal.StructType().Fields.Fields() {
		fields[i] = structVal.FieldValue(field.Name.Name)
	}

	field0Value, ok := fields[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field0 := types.NewArray[float32](field0Value)

	field1Slice, ok := fields[1].(*values.Slice)
	if !ok {
		err = fmt.Errorf("cannot use value %T to set []<no value>: not a slice", fields[1])
		return
	}
	field1Elements := make([]*Gemma3Layer, field1Slice.Len())
	for i := 0; i < field1Slice.Len(); i++ {
		field1HandleI := field1Slice.Element(i)
		var field1ElmtI *Gemma3Layer
		field1ElmtI, err = fty.MarshalGemma3Layer(field1HandleI)
		if err != nil {
			return
		}
		field1Elements[i] = field1ElmtI
	}
	field1, err := types.NewSlice[*Gemma3Layer](
		field1Slice.SliceType(),
		field1Elements,
	)
	if err != nil {
		return nil, err
	}

	field2Value, ok := fields[2].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[2], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field2 := types.NewArray[float32](field2Value)

	s.TokenEmbedding = field0
	s.Layers = field1
	s.FinalNormScale = field2
	return
}

func (s Gemma3) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *Gemma3) Bridge() types.Bridge { return &s.handle }

// NewGemma3 returns a handle on named type Gemma3.
func (fac *Factory) NewGemma3() *Gemma3 {
	s := &Gemma3{}
	typ := fac.Package.handle.IR().Decls.TypeByName("Gemma3")
	s.handle = handleGemma3{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	structVal, err := values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}
	s.value = values.NewNamedType(structVal, typ)

	return s
}

var _ types.Bridge = (*handleGemma3)(nil)

func (h *handleGemma3) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {
	case "TokenEmbedding":
		return nil, errors.Errorf("cannot create a new instance for field TokenEmbedding: type types.Array[float32] not supported")
	case "Layers":
		slice, err := types.NewEmptySlice[*Gemma3Layer](field.Type(), func() (types.Bridge, error) {
			return h.pkg.handle.Factory.NewGemma3Layer().Bridge(), nil
		})
		if err != nil {
			return nil, err
		}
		return slice.Bridge(), nil
	case "FinalNormScale":
		return nil, errors.Errorf("cannot create a new instance for field FinalNormScale: type types.Array[float32] not supported")

	default:
		return nil, errors.Errorf("structure Gemma3 has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleGemma3) SetField(field *ir.Field, val types.Bridge) error {

	name := field.Name.Name
	structVal, ok := h.owner.value.Underlying().(*values.Struct)
	if !ok {
		return fmt.Errorf("incorrect underlying value for named type Gemma3: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
	}
	switch name {

	case "TokenEmbedding":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field TokenEmbedding: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.TokenEmbedding = fieldValue
		structVal.SetField("TokenEmbedding", val.GXValue())
		return nil

	case "Layers":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(*types.Slice[*Gemma3Layer])
		if !ok {
			return errors.Errorf("cannot set field Layers: cannot cast %T to *types.Slice[*Gemma3Layer]", bridger)
		}
		h.owner.Layers = fieldValue
		structVal.SetField("Layers", val.GXValue())
		return nil

	case "FinalNormScale":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field FinalNormScale: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.FinalNormScale = fieldValue
		structVal.SetField("FinalNormScale", val.GXValue())
		return nil

	default:
		return errors.Errorf("structure Gemma3 has no field %q", name)
	}

}

// NewSamplingState returns a new sampling state from the initial prompt.
func (recv *Gemma3) NewSamplingState(arg0 types.Array[int32]) (_ *SamplingState, _ types.Array[float32], _ types.Atom[int64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // prompt [NumSamplingSteps+1]int32
	}
	var runner tracer.CompiledFunc
	runner, err = recv.handle.pkg.cacheGemma3NewSamplingState.Runner(recv.value, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(recv.value, args, recv.handle.pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := recv.handle.pkg.handle.Factory

	var out0 *SamplingState
	out0, err = fty.MarshalSamplingState(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[float32](out1Value)

	out2Value, ok := outputs[2].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[2], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out2 := types.NewAtom[int64](out2Value)

	return out0, out1, out2, nil
}

// SampleStep runs a sample step and returns the new state.
func (recv *Gemma3) SampleStep(arg0 *SamplingState) (_ *SamplingState, _ types.Array[float32], _ types.Atom[int64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // state gemma.SamplingState
	}
	var runner tracer.CompiledFunc
	runner, err = recv.handle.pkg.cacheGemma3SampleStep.Runner(recv.value, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(recv.value, args, recv.handle.pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := recv.handle.pkg.handle.Factory

	var out0 *SamplingState
	out0, err = fty.MarshalSamplingState(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[float32](out1Value)

	out2Value, ok := outputs[2].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[2], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out2 := types.NewAtom[int64](out2Value)

	return out0, out1, out2, nil
}
